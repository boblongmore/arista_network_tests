---

- name: Assert that the web site is reachable
  block:
    - name: Check http status from user side
      ansible.builtin.uri:
        url: "http://{{ http_test_web_server }}"
        return_content: true
      ignore_unreachable: true
      ignore_errors: true
      delegate_to: user
      register: web_contents

    - name: Assert that Platform Pete is in returned content
      ansible.builtin.assert:
        that:
          - "'Platform Pete' in web_contents['content']"
          - "'Network is unreachable' not in web_contents['msg']"
        success_msg: "HTTP_tests_passed"
        fail_msg: "HTTP_tests_failed"
      register: test_results

    - name: Set facts used in kafka data payload
      ansible.builtin.set_fact:
        test_name: "Arista_test_http"
        device_name: "{{ inventory_hostname }}"
        test_status: "{{ test_results['msg'] }}"

    - name: Publish kafka message with test test_results
      ansible.builtin.include_role:
        name: messages_kafka
      vars:
        messages_kafka_data:
          - "{{ lookup('ansible.builtin.template', '../../../templates/success_data.j2') }}"

  rescue:
    - name: Set facts used in kafka data payload
      ansible.builtin.set_fact:
        test_name: "Arista_test_http"
        device_name: "{{ inventory_hostname }}"
        test_status: "{{ test_results['msg'] }}"
        failed_test: "{{ test_results['assertion'] }}"
      when: web_contents['content']

    - name: Set fact for network unreachable
      ansible.builtin.set_fact:
        test_name: "Arista_test_http"
        device_name: "{{ inventory_hostname }}"
        test_status: "{{ test_results['msg'] }}"
        failed_test: "{{ test_results['assertion'] }}"
      when: "'unreachable' in web_contents['msg']"

    - name: Publish kafka message with test test_results
      ansible.builtin.include_role:
        name: messages_kafka
      vars:
        messages_kafka_data:
          - "{{ lookup('ansible.builtin.template', '../../../templates/failure_data.j2') }}"
